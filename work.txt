request lifecycle ---
trait ---
clean coding ---
variable table ---
basics ---
model events--
routes name grouping ---

autoload.php :- The autoload.php file generated by Composer is responsible for loading all the necessary classes and files needed for your Laravel application to run.

start.php :- The start.php file was used to set the environment for the application. It included logic to detect the current environment (e.g., development, testing, production) and load the corresponding configuration files.

app.php :- The app.php file in Laravel serves as a central configuration file where you register service providers, define facade aliases, set the application environment, and configure various default settings for the Laravel application.

kernel.php :- The kernel.php file in Laravel is the central location for defining the application's HTTP and console middleware, allowing you to manage and organize middleware groups, route middleware, and schedule console commands.

middleware :- Middleware in Laravel provides a mechanism to filter HTTP requests entering your application, allowing you to perform actions before and after the request reaches the route handler, such as authentication, logging, session handling, and more, thus enabling modular and reusable code to be executed at various stages of the request lifecycle.


custom middleware ---
model events ---
name
php artisan make:middleware CustomMiddleware
The boot method is a special method in Eloquent models that is automatically called when the model is booted. Model booting occurs when the model class is first loaded into memory.

seeder
faker
db:seed


Seeder:- In Laravel, a seeder is a class that allows you to populate database tables with sample or default data. Seeders are often used in conjunction with Laravel's Eloquent ORM (Object-Relational Mapping) to insert data into database tables during the development and testing phases of a project.
php artisan make:seeder YourSeederName         --creating file
php artisan db:seed --class=YourSeederName     --seed specific file
php artisan db:seed                            --run them all at once


Faker:- In Laravel, Faker is a PHP library integrated into the framework that provides a convenient way to generate fake data for testing and seeding databases, allowing developers to create realistic-looking but randomized data for various scenarios without using actual production data.
composer require fzaninotto/faker     --install
$faker = Faker::create();
for ($i = 0; $i < 10; $i++) {
    DB::table('users')->insert([
        'name' => $faker->name,
        'email' => $faker->unique()->safeEmail,
        'password' => bcrypt('password'),
    ]);
}


CACHE :-

->Storing data in the cache:
cache(['key' => 'value'], $minutes);
->Retrieving data from the cache:
$value = cache('key');
->Checking if an item exists in the cache:
if (cache()->has('key')) {
    // Cache hit
} else {
    // Cache miss
}
->Removing an item from the cache:
cache()->forget('key');
Clearing a specific cache item
$ php artisan cache:forget example_key
Flushing all items from the cache
$ php artisan cache:flush


browser cache limit?

$response = response()->view('home');
$response->header('Cache-Control', 'public, max-age=3600'); // Cache for 1 hour
return $response;
Yes, browser cache is limited, and there are constraints on the amount of data and the duration for which resources are stored in the cache. The limits can vary between browsers and devices







=>pending works
requests in teachers
dropdown for teachers
